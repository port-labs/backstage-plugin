import React from 'react';
import * as _backstage_core_plugin_api from '@backstage/core-plugin-api';
import { RJSFSchema, UiSchema } from '@rjsf/utils';

/** @public */
declare const SettingsModal: (props: {
    open: boolean;
    close: Function;
    componentName?: string;
    children: JSX.Element;
}) => React.JSX.Element;

/**
 * @public
 */
type ComponentRenderer = {
    Renderer?: (props: RendererProps) => JSX.Element;
};
/**
 * @public
 */
type ComponentParts = {
    Content: (props?: any) => JSX.Element;
    Actions?: () => JSX.Element;
    Settings?: () => JSX.Element;
    ContextProvider?: (props: any) => JSX.Element;
};
/**
 * @public
 */
type RendererProps = {
    title?: string;
} & ComponentParts;
/**
 * @public
 */
type CardExtensionProps<T> = ComponentRenderer & {
    title?: string;
} & T;
/**
 * @public
 */
type CardLayout = {
    width?: {
        minColumns?: number;
        maxColumns?: number;
        defaultColumns?: number;
    };
    height?: {
        minRows?: number;
        maxRows?: number;
        defaultRows?: number;
    };
};
/**
 * @public
 */
type CardSettings = {
    schema?: RJSFSchema;
    uiSchema?: UiSchema;
};
/**
 * @public
 */
type CardConfig = {
    layout?: CardLayout;
    settings?: CardSettings;
};
/**
 * An extension creator to create card based components for the homepage
 *
 * @public
 */
declare function createCardExtension<T>(options: {
    title?: string;
    components: () => Promise<ComponentParts>;
    name?: string;
    description?: string;
    layout?: CardLayout;
    settings?: CardSettings;
}): _backstage_core_plugin_api.Extension<(props: CardExtensionProps<T>) => React.JSX.Element>;

export { type CardConfig, type CardExtensionProps, type CardLayout, type CardSettings, type ComponentParts, type ComponentRenderer, type RendererProps, SettingsModal, createCardExtension };
