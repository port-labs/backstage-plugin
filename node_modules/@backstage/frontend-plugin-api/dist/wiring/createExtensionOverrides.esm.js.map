{"version":3,"file":"createExtensionOverrides.esm.js","sources":["../../src/wiring/createExtensionOverrides.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ExtensionDefinition } from './createExtension';\nimport {\n  Extension,\n  resolveExtensionDefinition,\n} from './resolveExtensionDefinition';\nimport { ExtensionOverrides, FeatureFlagConfig } from './types';\n\n/** @public */\nexport interface ExtensionOverridesOptions {\n  extensions: ExtensionDefinition<any, any>[];\n  featureFlags?: FeatureFlagConfig[];\n}\n\n/** @internal */\nexport interface InternalExtensionOverrides extends ExtensionOverrides {\n  readonly version: 'v1';\n  readonly extensions: Extension<unknown>[];\n  readonly featureFlags: FeatureFlagConfig[];\n}\n\n/** @public */\nexport function createExtensionOverrides(\n  options: ExtensionOverridesOptions,\n): ExtensionOverrides {\n  const extensions = options.extensions.map(def =>\n    resolveExtensionDefinition(def),\n  );\n  const featureFlags = options.featureFlags ?? [];\n  return {\n    $$type: '@backstage/ExtensionOverrides',\n    version: 'v1',\n    extensions,\n    featureFlags,\n    toString() {\n      const ex = extensions.map(String).join(',');\n      const ff = featureFlags.map(f => f.name).join(',');\n      return `ExtensionOverrides{extensions=[${ex}],featureFlags=[${ff}]}`;\n    },\n  } as InternalExtensionOverrides;\n}\n\n/** @internal */\nexport function toInternalExtensionOverrides(\n  overrides: ExtensionOverrides,\n): InternalExtensionOverrides {\n  const internal = overrides as InternalExtensionOverrides;\n  if (internal.$$type !== '@backstage/ExtensionOverrides') {\n    throw new Error(\n      `Invalid extension overrides instance, bad type '${internal.$$type}'`,\n    );\n  }\n  if (internal.version !== 'v1') {\n    throw new Error(\n      `Invalid extension overrides instance, bad version '${internal.version}'`,\n    );\n  }\n  return internal;\n}\n"],"names":[],"mappings":";;AAqCO,SAAS,yBACd,OACoB,EAAA;AACpB,EAAM,MAAA,UAAA,GAAa,QAAQ,UAAW,CAAA,GAAA;AAAA,IAAI,CAAA,GAAA,KACxC,2BAA2B,GAAG,CAAA;AAAA,GAChC,CAAA;AACA,EAAM,MAAA,YAAA,GAAe,OAAQ,CAAA,YAAA,IAAgB,EAAC,CAAA;AAC9C,EAAO,OAAA;AAAA,IACL,MAAQ,EAAA,+BAAA;AAAA,IACR,OAAS,EAAA,IAAA;AAAA,IACT,UAAA;AAAA,IACA,YAAA;AAAA,IACA,QAAW,GAAA;AACT,MAAA,MAAM,KAAK,UAAW,CAAA,GAAA,CAAI,MAAM,CAAA,CAAE,KAAK,GAAG,CAAA,CAAA;AAC1C,MAAM,MAAA,EAAA,GAAK,aAAa,GAAI,CAAA,CAAA,CAAA,KAAK,EAAE,IAAI,CAAA,CAAE,KAAK,GAAG,CAAA,CAAA;AACjD,MAAO,OAAA,CAAA,+BAAA,EAAkC,EAAE,CAAA,gBAAA,EAAmB,EAAE,CAAA,EAAA,CAAA,CAAA;AAAA,KAClE;AAAA,GACF,CAAA;AACF;;;;"}