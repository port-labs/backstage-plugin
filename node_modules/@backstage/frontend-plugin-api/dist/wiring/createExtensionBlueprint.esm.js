import { createExtension } from './createExtension.esm.js';
import { createExtensionDataContainer } from './createExtensionDataContainer.esm.js';
import { resolveInputOverrides } from './resolveInputOverrides.esm.js';

class ExtensionBlueprintImpl {
  constructor(options) {
    this.options = options;
    this.dataRefs = options.dataRefs;
  }
  dataRefs;
  makeWithOverrides(args) {
    const schema = {
      ...this.options.config?.schema,
      ...args.config?.schema
    };
    return createExtension({
      kind: this.options.kind,
      namespace: args.namespace ?? this.options.namespace,
      name: args.name ?? this.options.name,
      attachTo: args.attachTo ?? this.options.attachTo,
      disabled: args.disabled ?? this.options.disabled,
      inputs: { ...args.inputs, ...this.options.inputs },
      output: args.output ?? this.options.output,
      config: Object.keys(schema).length === 0 ? void 0 : { schema },
      factory: ({ node, config, inputs }) => {
        return args.factory(
          (innerParams, innerContext) => {
            return createExtensionDataContainer(
              this.options.factory(innerParams, {
                node,
                config: innerContext?.config ?? config,
                inputs: resolveInputOverrides(
                  this.options.inputs,
                  inputs,
                  innerContext?.inputs
                )
                // TODO: Might be able to improve this once legacy inputs are gone
              }),
              this.options.output
            );
          },
          {
            node,
            config,
            inputs
          }
        );
      }
    });
  }
  make(args) {
    return createExtension({
      kind: this.options.kind,
      namespace: args.namespace ?? this.options.namespace,
      name: args.name ?? this.options.name,
      attachTo: args.attachTo ?? this.options.attachTo,
      disabled: args.disabled ?? this.options.disabled,
      inputs: this.options.inputs,
      output: this.options.output,
      config: this.options.config,
      factory: (ctx) => this.options.factory(args.params, ctx)
    });
  }
}
function createExtensionBlueprint(options) {
  return new ExtensionBlueprintImpl(options);
}

export { createExtensionBlueprint };
//# sourceMappingURL=createExtensionBlueprint.esm.js.map
