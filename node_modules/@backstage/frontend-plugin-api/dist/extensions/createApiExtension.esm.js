import '../wiring/coreExtensionData.esm.js';
import { createExtension } from '../wiring/createExtension.esm.js';
import { ApiBlueprint } from '../blueprints/ApiBlueprint.esm.js';

function createApiExtension(options) {
  const { factory, configSchema, inputs: extensionInputs } = options;
  const apiRef = "api" in options ? options.api : factory.api;
  return createExtension({
    kind: "api",
    // Since ApiRef IDs use a global namespace we use the namespace here in order to override
    // potential plugin IDs and always end up with the format `api:<api-ref-id>`
    namespace: apiRef.id,
    attachTo: { id: "app", input: "apis" },
    inputs: extensionInputs,
    configSchema,
    output: {
      api: ApiBlueprint.dataRefs.factory
    },
    factory({ config, inputs }) {
      if (typeof factory === "function") {
        return { api: factory({ config, inputs }) };
      }
      return { api: factory };
    }
  });
}
((createApiExtension2) => {
  createApiExtension2.factoryDataRef = ApiBlueprint.dataRefs.factory;
})(createApiExtension || (createApiExtension = {}));

export { createApiExtension };
//# sourceMappingURL=createApiExtension.esm.js.map
