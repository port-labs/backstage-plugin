import React, { lazy } from 'react';
import { ExtensionBoundary } from '../components/ExtensionBoundary.esm.js';
import { createSchemaFromZod } from '../schema/createSchemaFromZod.esm.js';
import { coreExtensionData } from '../wiring/coreExtensionData.esm.js';
import { createExtension } from '../wiring/createExtension.esm.js';

function createPageExtension(options) {
  const configSchema = "configSchema" in options ? options.configSchema : createSchemaFromZod(
    (z) => z.object({ path: z.string().default(options.defaultPath) })
  );
  return createExtension({
    kind: "page",
    namespace: options.namespace,
    name: options.name,
    attachTo: options.attachTo ?? { id: "app/routes", input: "routes" },
    configSchema,
    inputs: options.inputs,
    disabled: options.disabled,
    output: {
      element: coreExtensionData.reactElement,
      path: coreExtensionData.routePath,
      routeRef: coreExtensionData.routeRef.optional()
    },
    factory({ config, inputs, node }) {
      const ExtensionComponent = lazy(
        () => options.loader({ config, inputs }).then((element) => ({ default: () => element }))
      );
      return {
        path: config.path,
        routeRef: options.routeRef,
        element: /* @__PURE__ */ React.createElement(ExtensionBoundary, { node }, /* @__PURE__ */ React.createElement(ExtensionComponent, null))
      };
    }
  });
}

export { createPageExtension };
//# sourceMappingURL=createPageExtension.esm.js.map
