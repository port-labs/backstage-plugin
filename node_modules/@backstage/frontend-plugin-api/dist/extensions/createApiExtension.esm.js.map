{"version":3,"file":"createApiExtension.esm.js","sources":["../../src/extensions/createApiExtension.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AnyApiFactory, AnyApiRef } from '@backstage/core-plugin-api';\nimport { PortableSchema } from '../schema';\nimport { ResolvedExtensionInputs, createExtension } from '../wiring';\nimport { AnyExtensionInputMap } from '../wiring/createExtension';\nimport { Expand } from '../types';\nimport { ApiBlueprint } from '../blueprints/ApiBlueprint';\n\n/**\n * @public\n * @deprecated Use {@link ApiBlueprint} instead.\n */\nexport function createApiExtension<\n  TConfig extends {},\n  TInputs extends AnyExtensionInputMap,\n>(\n  options: (\n    | {\n        api: AnyApiRef;\n        factory: (options: {\n          config: TConfig;\n          inputs: Expand<ResolvedExtensionInputs<TInputs>>;\n        }) => AnyApiFactory;\n      }\n    | {\n        factory: AnyApiFactory;\n      }\n  ) & {\n    configSchema?: PortableSchema<TConfig>;\n    inputs?: TInputs;\n  },\n) {\n  const { factory, configSchema, inputs: extensionInputs } = options;\n\n  const apiRef =\n    'api' in options ? options.api : (factory as { api: AnyApiRef }).api;\n\n  return createExtension({\n    kind: 'api',\n    // Since ApiRef IDs use a global namespace we use the namespace here in order to override\n    // potential plugin IDs and always end up with the format `api:<api-ref-id>`\n    namespace: apiRef.id,\n    attachTo: { id: 'app', input: 'apis' },\n    inputs: extensionInputs,\n    configSchema,\n    output: {\n      api: ApiBlueprint.dataRefs.factory,\n    },\n    factory({ config, inputs }) {\n      if (typeof factory === 'function') {\n        return { api: factory({ config, inputs }) };\n      }\n      return { api: factory };\n    },\n  });\n}\n\n/**\n * @public\n * @deprecated Use {@link ApiBlueprint} instead.\n */\nexport namespace createApiExtension {\n  /**\n   * @deprecated Use {@link ApiBlueprint} instead.\n   */\n  export const factoryDataRef = ApiBlueprint.dataRefs.factory;\n}\n"],"names":["createApiExtension"],"mappings":";;;;AA2BO,SAAS,mBAId,OAeA,EAAA;AACA,EAAA,MAAM,EAAE,OAAA,EAAS,YAAc,EAAA,MAAA,EAAQ,iBAAoB,GAAA,OAAA,CAAA;AAE3D,EAAA,MAAM,MACJ,GAAA,KAAA,IAAS,OAAU,GAAA,OAAA,CAAQ,MAAO,OAA+B,CAAA,GAAA,CAAA;AAEnE,EAAA,OAAO,eAAgB,CAAA;AAAA,IACrB,IAAM,EAAA,KAAA;AAAA;AAAA;AAAA,IAGN,WAAW,MAAO,CAAA,EAAA;AAAA,IAClB,QAAU,EAAA,EAAE,EAAI,EAAA,KAAA,EAAO,OAAO,MAAO,EAAA;AAAA,IACrC,MAAQ,EAAA,eAAA;AAAA,IACR,YAAA;AAAA,IACA,MAAQ,EAAA;AAAA,MACN,GAAA,EAAK,aAAa,QAAS,CAAA,OAAA;AAAA,KAC7B;AAAA,IACA,OAAQ,CAAA,EAAE,MAAQ,EAAA,MAAA,EAAU,EAAA;AAC1B,MAAI,IAAA,OAAO,YAAY,UAAY,EAAA;AACjC,QAAA,OAAO,EAAE,GAAK,EAAA,OAAA,CAAQ,EAAE,MAAQ,EAAA,MAAA,EAAQ,CAAE,EAAA,CAAA;AAAA,OAC5C;AACA,MAAO,OAAA,EAAE,KAAK,OAAQ,EAAA,CAAA;AAAA,KACxB;AAAA,GACD,CAAA,CAAA;AACH,CAAA;AAAA,CAMO,CAAUA,mBAAV,KAAA;AAIE,EAAMA,mBAAAA,CAAA,cAAiB,GAAA,YAAA,CAAa,QAAS,CAAA,OAAA,CAAA;AAAA,CAJrC,EAAA,kBAAA,KAAA,kBAAA,GAAA,EAAA,CAAA,CAAA;;;;"}