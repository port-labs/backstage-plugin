import { lazy } from 'react';
import '../wiring/coreExtensionData.esm.js';
import { createExtension } from '../wiring/createExtension.esm.js';
import { createExtensionDataRef } from '../wiring/createExtensionDataRef.esm.js';

function createComponentExtension(options) {
  return createExtension({
    kind: "component",
    namespace: options.ref.id,
    name: options.name,
    attachTo: { id: "app", input: "components" },
    inputs: options.inputs,
    disabled: options.disabled,
    configSchema: options.configSchema,
    output: {
      component: createComponentExtension.componentDataRef
    },
    factory({ config, inputs }) {
      if ("sync" in options.loader) {
        return {
          component: {
            ref: options.ref,
            impl: options.loader.sync({ config, inputs })
          }
        };
      }
      const lazyLoader = options.loader.lazy;
      const ExtensionComponent = lazy(
        () => lazyLoader({ config, inputs }).then((Component) => ({
          default: Component
        }))
      );
      return {
        component: {
          ref: options.ref,
          impl: ExtensionComponent
        }
      };
    }
  });
}
((createComponentExtension2) => {
  createComponentExtension2.componentDataRef = createExtensionDataRef().with({ id: "core.component.component" });
})(createComponentExtension || (createComponentExtension = {}));

export { createComponentExtension };
//# sourceMappingURL=createComponentExtension.esm.js.map
