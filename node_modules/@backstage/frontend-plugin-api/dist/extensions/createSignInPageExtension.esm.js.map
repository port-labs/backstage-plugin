{"version":3,"file":"createSignInPageExtension.esm.js","sources":["../../src/extensions/createSignInPageExtension.tsx"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ComponentType, lazy } from 'react';\nimport { ExtensionBoundary } from '../components';\nimport { PortableSchema } from '../schema';\nimport {\n  createExtension,\n  ResolvedExtensionInputs,\n  AnyExtensionInputMap,\n  ExtensionDefinition,\n} from '../wiring';\nimport { Expand } from '../types';\nimport { SignInPageProps } from '@backstage/core-plugin-api';\nimport { SignInPageBlueprint } from '../blueprints';\n\n/**\n *\n * @public\n * @deprecated Use {@link SignInPageBlueprint} instead.\n */\nexport function createSignInPageExtension<\n  TConfig extends {},\n  TInputs extends AnyExtensionInputMap,\n>(options: {\n  namespace?: string;\n  name?: string;\n  attachTo?: { id: string; input: string };\n  configSchema?: PortableSchema<TConfig>;\n  disabled?: boolean;\n  inputs?: TInputs;\n  loader: (options: {\n    config: TConfig;\n    inputs: Expand<ResolvedExtensionInputs<TInputs>>;\n  }) => Promise<ComponentType<SignInPageProps>>;\n}): ExtensionDefinition<TConfig> {\n  return createExtension({\n    kind: 'sign-in-page',\n    namespace: options?.namespace,\n    name: options?.name,\n    attachTo: options.attachTo ?? { id: 'app/root', input: 'signInPage' },\n    configSchema: options.configSchema,\n    inputs: options.inputs,\n    disabled: options.disabled,\n    output: {\n      component: createSignInPageExtension.componentDataRef,\n    },\n    factory({ config, inputs, node }) {\n      const ExtensionComponent = lazy(() =>\n        options\n          .loader({ config, inputs })\n          .then(component => ({ default: component })),\n      );\n\n      return {\n        component: props => (\n          <ExtensionBoundary node={node} routable>\n            <ExtensionComponent {...props} />\n          </ExtensionBoundary>\n        ),\n      };\n    },\n  });\n}\n\n/**\n * @public\n * @deprecated Use {@link SignInPageBlueprint} instead.\n */\nexport namespace createSignInPageExtension {\n  /**\n   * @deprecated Use {@link SignInPageBlueprint} instead.\n   */\n  export const componentDataRef = SignInPageBlueprint.dataRefs.component;\n}\n"],"names":["createSignInPageExtension"],"mappings":";;;;;;;;;;;;;;;;AAkCO,SAAS,0BAGd,OAW+B,EAAA;AAC/B,EAAA,OAAO,eAAgB,CAAA;AAAA,IACrB,IAAM,EAAA,cAAA;AAAA,IACN,WAAW,OAAS,EAAA,SAAA;AAAA,IACpB,MAAM,OAAS,EAAA,IAAA;AAAA,IACf,UAAU,OAAQ,CAAA,QAAA,IAAY,EAAE,EAAI,EAAA,UAAA,EAAY,OAAO,YAAa,EAAA;AAAA,IACpE,cAAc,OAAQ,CAAA,YAAA;AAAA,IACtB,QAAQ,OAAQ,CAAA,MAAA;AAAA,IAChB,UAAU,OAAQ,CAAA,QAAA;AAAA,IAClB,MAAQ,EAAA;AAAA,MACN,WAAW,yBAA0B,CAAA,gBAAA;AAAA,KACvC;AAAA,IACA,OAAQ,CAAA,EAAE,MAAQ,EAAA,MAAA,EAAQ,MAAQ,EAAA;AAChC,MAAA,MAAM,kBAAqB,GAAA,IAAA;AAAA,QAAK,MAC9B,OAAA,CACG,MAAO,CAAA,EAAE,MAAQ,EAAA,MAAA,EAAQ,CAAA,CACzB,IAAK,CAAA,CAAA,SAAA,MAAc,EAAE,OAAA,EAAS,WAAY,CAAA,CAAA;AAAA,OAC/C,CAAA;AAEA,MAAO,OAAA;AAAA,QACL,SAAA,EAAW,CACT,KAAA,qBAAA,KAAA,CAAA,aAAA,CAAC,iBAAkB,EAAA,EAAA,IAAA,EAAY,QAAQ,EAAA,IAAA,EAAA,kBACpC,KAAA,CAAA,aAAA,CAAA,kBAAA,EAAA,EAAoB,GAAG,KAAA,EAAO,CACjC,CAAA;AAAA,OAEJ,CAAA;AAAA,KACF;AAAA,GACD,CAAA,CAAA;AACH,CAAA;AAAA,CAMO,CAAUA,0BAAV,KAAA;AAIE,EAAMA,0BAAAA,CAAA,gBAAmB,GAAA,mBAAA,CAAoB,QAAS,CAAA,SAAA,CAAA;AAAA,CAJ9C,EAAA,yBAAA,KAAA,yBAAA,GAAA,EAAA,CAAA,CAAA;;;;"}