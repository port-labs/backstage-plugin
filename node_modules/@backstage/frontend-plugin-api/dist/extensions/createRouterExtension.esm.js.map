{"version":3,"file":"createRouterExtension.esm.js","sources":["../../src/extensions/createRouterExtension.tsx"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ComponentType, PropsWithChildren } from 'react';\nimport { PortableSchema } from '../schema/types';\nimport {\n  AnyExtensionInputMap,\n  ExtensionDefinition,\n  ResolvedExtensionInputs,\n  createExtension,\n} from '../wiring/createExtension';\nimport { Expand } from '../types';\nimport { RouterBlueprint } from '../blueprints/RouterBlueprint';\n\n/**\n * Creates an extension that replaces the router implementation at the app root.\n * This is useful to be able to for example replace the BrowserRouter with a\n * MemoryRouter in tests, or to add additional props to a BrowserRouter.\n *\n * @public\n * @deprecated Use {@link RouterBlueprint} instead.\n */\nexport function createRouterExtension<\n  TConfig extends {},\n  TInputs extends AnyExtensionInputMap,\n>(options: {\n  namespace?: string;\n  name?: string;\n  attachTo?: { id: string; input: string };\n  configSchema?: PortableSchema<TConfig>;\n  disabled?: boolean;\n  inputs?: TInputs;\n  Component: ComponentType<\n    PropsWithChildren<{\n      inputs: Expand<ResolvedExtensionInputs<TInputs>>;\n      config: TConfig;\n    }>\n  >;\n}): ExtensionDefinition<TConfig> {\n  return createExtension({\n    kind: 'app-router-component',\n    namespace: options.namespace,\n    name: options.name,\n    attachTo: options.attachTo ?? { id: 'app/root', input: 'router' },\n    configSchema: options.configSchema,\n    disabled: options.disabled,\n    inputs: options.inputs,\n    output: {\n      component: RouterBlueprint.dataRefs.component,\n    },\n    factory({ inputs, config }) {\n      const Component = (props: PropsWithChildren<{}>) => {\n        return (\n          <options.Component inputs={inputs} config={config}>\n            {props.children}\n          </options.Component>\n        );\n      };\n      return {\n        component: Component,\n      };\n    },\n  });\n}\n\n/**\n * @public\n * @deprecated Use {@link RouterBlueprint} instead.\n */\nexport namespace createRouterExtension {\n  /**\n   * @deprecated Use {@link RouterBlueprint} instead.\n   */\n  export const componentDataRef = RouterBlueprint.dataRefs.component;\n}\n"],"names":["createRouterExtension"],"mappings":";;;;AAmCO,SAAS,sBAGd,OAa+B,EAAA;AAC/B,EAAA,OAAO,eAAgB,CAAA;AAAA,IACrB,IAAM,EAAA,sBAAA;AAAA,IACN,WAAW,OAAQ,CAAA,SAAA;AAAA,IACnB,MAAM,OAAQ,CAAA,IAAA;AAAA,IACd,UAAU,OAAQ,CAAA,QAAA,IAAY,EAAE,EAAI,EAAA,UAAA,EAAY,OAAO,QAAS,EAAA;AAAA,IAChE,cAAc,OAAQ,CAAA,YAAA;AAAA,IACtB,UAAU,OAAQ,CAAA,QAAA;AAAA,IAClB,QAAQ,OAAQ,CAAA,MAAA;AAAA,IAChB,MAAQ,EAAA;AAAA,MACN,SAAA,EAAW,gBAAgB,QAAS,CAAA,SAAA;AAAA,KACtC;AAAA,IACA,OAAQ,CAAA,EAAE,MAAQ,EAAA,MAAA,EAAU,EAAA;AAC1B,MAAM,MAAA,SAAA,GAAY,CAAC,KAAiC,KAAA;AAClD,QAAA,2CACG,OAAQ,CAAA,SAAA,EAAR,EAAkB,MAAgB,EAAA,MAAA,EAAA,EAChC,MAAM,QACT,CAAA,CAAA;AAAA,OAEJ,CAAA;AACA,MAAO,OAAA;AAAA,QACL,SAAW,EAAA,SAAA;AAAA,OACb,CAAA;AAAA,KACF;AAAA,GACD,CAAA,CAAA;AACH,CAAA;AAAA,CAMO,CAAUA,sBAAV,KAAA;AAIE,EAAMA,sBAAAA,CAAA,gBAAmB,GAAA,eAAA,CAAgB,QAAS,CAAA,SAAA,CAAA;AAAA,CAJ1C,EAAA,qBAAA,KAAA,qBAAA,GAAA,EAAA,CAAA,CAAA;;;;"}