import { SidebarItem } from '@backstage/core-components';
import { useApi, appThemeApiRef } from '@backstage/core-plugin-api';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';
import Menu from '@material-ui/core/Menu';
import MenuItem from '@material-ui/core/MenuItem';
import AutoIcon from '@material-ui/icons/BrightnessAuto';
import React, { useState, useCallback, cloneElement } from 'react';
import useObservable from 'react-use/esm/useObservable';

const ThemeIcon = ({ active, icon }) => icon ? cloneElement(icon, {
  color: active ? "primary" : void 0
}) : /* @__PURE__ */ React.createElement(AutoIcon, { color: active ? "primary" : void 0 });
const SidebarThemeSwitcher = () => {
  const appThemeApi = useApi(appThemeApiRef);
  const themeId = useObservable(
    appThemeApi.activeThemeId$(),
    appThemeApi.getActiveThemeId()
  );
  const themeIds = appThemeApi.getInstalledThemes();
  const activeTheme = themeIds.find((t) => t.id === themeId);
  const [anchorEl, setAnchorEl] = useState();
  const open = Boolean(anchorEl);
  const handleOpen = (event) => {
    setAnchorEl(event.currentTarget);
  };
  const handleSelectTheme = (newThemeId) => {
    if (themeIds.some((t) => t.id === newThemeId)) {
      appThemeApi.setActiveThemeId(newThemeId);
    } else {
      appThemeApi.setActiveThemeId(void 0);
    }
    setAnchorEl(void 0);
  };
  const handleClose = () => {
    setAnchorEl(void 0);
  };
  const ActiveIcon = useCallback(
    () => /* @__PURE__ */ React.createElement(ThemeIcon, { icon: activeTheme?.icon }),
    [activeTheme]
  );
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    SidebarItem,
    {
      icon: ActiveIcon,
      text: "Switch Theme",
      id: "theme-button",
      "aria-haspopup": "listbox",
      "aria-controls": "theme-menu",
      "aria-label": "switch theme",
      "aria-expanded": open ? "true" : void 0,
      onClick: handleOpen
    }
  ), /* @__PURE__ */ React.createElement(
    Menu,
    {
      id: "theme-menu",
      anchorEl,
      open,
      onClose: handleClose,
      MenuListProps: {
        "aria-labelledby": "theme-button",
        role: "listbox"
      }
    },
    /* @__PURE__ */ React.createElement(MenuItem, { disabled: true }, "Choose a theme"),
    /* @__PURE__ */ React.createElement(
      MenuItem,
      {
        selected: themeId === void 0,
        onClick: () => handleSelectTheme(void 0)
      },
      /* @__PURE__ */ React.createElement(ListItemIcon, null, /* @__PURE__ */ React.createElement(ThemeIcon, { icon: void 0, active: themeId === void 0 })),
      /* @__PURE__ */ React.createElement(ListItemText, null, "Auto")
    ),
    themeIds.map((theme) => {
      const active = theme.id === themeId;
      return /* @__PURE__ */ React.createElement(
        MenuItem,
        {
          key: theme.id,
          selected: active,
          "aria-selected": active,
          onClick: () => handleSelectTheme(theme.id)
        },
        /* @__PURE__ */ React.createElement(ListItemIcon, null, /* @__PURE__ */ React.createElement(ThemeIcon, { icon: theme.icon, active })),
        /* @__PURE__ */ React.createElement(ListItemText, null, theme.title)
      );
    })
  ));
};

export { SidebarThemeSwitcher };
//# sourceMappingURL=SidebarThemeSwitcher.esm.js.map
