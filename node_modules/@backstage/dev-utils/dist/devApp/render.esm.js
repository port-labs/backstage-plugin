import { createApp } from '@backstage/app-defaults';
import { AppRouter, FlatRoutes } from '@backstage/core-app-api';
import { SidebarItem, SignInPage, AlertDisplay, OAuthRequestDialog, SidebarPage, Sidebar, SidebarSpacer, SidebarSpace, SidebarDivider } from '@backstage/core-components';
import { attachComponentData, createRouteRef, createApiFactory, configApiRef } from '@backstage/core-plugin-api';
import { scmIntegrationsApiRef, ScmIntegrationsApi } from '@backstage/integration-react';
import Box from '@material-ui/core/Box';
import BookmarkIcon from '@material-ui/icons/Bookmark';
import React from 'react';
import { createRoutesFromChildren, Route } from 'react-router-dom';
import { SidebarThemeSwitcher } from './SidebarThemeSwitcher.esm.js';
import 'react-dom';
import '../components/EntityGridItem/EntityGridItem.esm.js';
import { SidebarSignOutButton } from '../components/SidebarSignOutButton/SidebarSignOutButton.esm.js';

let ReactDOMPromise;
if (process.env.HAS_REACT_DOM_CLIENT) {
  ReactDOMPromise = import('react-dom/client');
} else {
  ReactDOMPromise = import('react-dom');
}
function isReactRouterBeta() {
  const [obj] = createRoutesFromChildren(/* @__PURE__ */ React.createElement(Route, { index: true, element: /* @__PURE__ */ React.createElement("div", null) }));
  return !obj.index;
}
const MaybeGatheringRoute = ({ element }) => element;
if (isReactRouterBeta()) {
  attachComponentData(MaybeGatheringRoute, "core.gatherMountPoints", true);
}
class DevAppBuilder {
  plugins = new Array();
  apis = new Array();
  rootChildren = new Array();
  routes = new Array();
  sidebarItems = new Array();
  signInProviders = new Array();
  defaultPage;
  themes;
  /**
   * Register one or more plugins to render in the dev app
   */
  registerPlugin(...plugins) {
    this.plugins.push(...plugins);
    return this;
  }
  /**
   * Register an API factory to add to the app
   */
  registerApi(factory) {
    this.apis.push(factory);
    return this;
  }
  /**
   * Adds a React node to place just inside the App Provider.
   *
   * Useful for adding more global components like the AlertDisplay.
   */
  addRootChild(node) {
    this.rootChildren.push(node);
    return this;
  }
  /**
   * Adds a new sidebar item to the dev app.
   *
   * Useful for adding only sidebar items without a corresponding page.
   */
  addSidebarItem(sidebarItem) {
    this.sidebarItems.push(sidebarItem);
    return this;
  }
  /**
   * Adds a page component along with accompanying sidebar item.
   *
   * If no path is provided one will be generated.
   * If no title is provided, no sidebar item will be created.
   */
  addPage(opts) {
    const path = opts.path ?? `/page-${this.routes.length + 1}`;
    if (!this.defaultPage || path === "/") {
      this.defaultPage = path;
    }
    if (opts.title) {
      this.sidebarItems.push(
        /* @__PURE__ */ React.createElement(
          SidebarItem,
          {
            key: path,
            to: path,
            text: opts.title,
            icon: opts.icon ?? BookmarkIcon
          }
        )
      );
    }
    this.routes.push(
      /* @__PURE__ */ React.createElement(
        MaybeGatheringRoute,
        {
          key: path,
          path,
          element: opts.element,
          children: opts.children
        }
      )
    );
    return this;
  }
  /**
   * Adds an array of themes to override the default theme.
   */
  addThemes(themes) {
    this.themes = themes;
    return this;
  }
  /**
   * Adds new sign in provider for the dev app
   */
  addSignInProvider(provider) {
    this.signInProviders.push(provider);
    return this;
  }
  /**
   * Build a DevApp component using the resources registered so far
   */
  build() {
    const fakeRouteRef = createRouteRef({ id: "fake" });
    const FakePage = () => /* @__PURE__ */ React.createElement(Box, { p: 3 }, "Page belonging to another plugin.");
    attachComponentData(FakePage, "core.mountPoint", fakeRouteRef);
    const apis = [...this.apis];
    if (!apis.some((api) => api.api.id === scmIntegrationsApiRef.id)) {
      apis.push(
        createApiFactory({
          api: scmIntegrationsApiRef,
          deps: { configApi: configApiRef },
          factory: ({ configApi }) => ScmIntegrationsApi.fromConfig(configApi)
        })
      );
    }
    const app = createApp({
      apis,
      plugins: this.plugins,
      themes: this.themes,
      components: {
        SignInPage: (props) => {
          return /* @__PURE__ */ React.createElement(
            SignInPage,
            {
              ...props,
              providers: ["guest", ...this.signInProviders],
              title: "Select a sign-in method",
              align: "center"
            }
          );
        }
      },
      bindRoutes: ({ bind }) => {
        for (const plugin of this.plugins ?? []) {
          const targets = {};
          for (const routeKey of Object.keys(plugin.externalRoutes)) {
            targets[routeKey] = fakeRouteRef;
          }
          bind(plugin.externalRoutes, targets);
        }
      }
    });
    const DevApp = /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(AlertDisplay, null), /* @__PURE__ */ React.createElement(OAuthRequestDialog, null), this.rootChildren, /* @__PURE__ */ React.createElement(AppRouter, null, /* @__PURE__ */ React.createElement(SidebarPage, null, /* @__PURE__ */ React.createElement(Sidebar, null, /* @__PURE__ */ React.createElement(SidebarSpacer, null), this.sidebarItems, /* @__PURE__ */ React.createElement(SidebarSpace, null), /* @__PURE__ */ React.createElement(SidebarDivider, null), /* @__PURE__ */ React.createElement(SidebarThemeSwitcher, null), /* @__PURE__ */ React.createElement(SidebarSignOutButton, null)), /* @__PURE__ */ React.createElement(FlatRoutes, null, this.routes, /* @__PURE__ */ React.createElement(Route, { path: "/_external_route", element: /* @__PURE__ */ React.createElement(FakePage, null) })))));
    return app.createRoot(DevApp);
  }
  /**
   * Build and render directory to #root element, with react hot loading.
   */
  render() {
    const DevApp = this.build();
    if (window.location.pathname === "/" && this.defaultPage && this.defaultPage !== "/") {
      window.location.pathname = this.defaultPage;
    }
    ReactDOMPromise.then((ReactDOM) => {
      if ("createRoot" in ReactDOM) {
        ReactDOM.createRoot(document.getElementById("root")).render(
          /* @__PURE__ */ React.createElement(DevApp, null)
        );
      } else {
        ReactDOM.render(/* @__PURE__ */ React.createElement(DevApp, null), document.getElementById("root"));
      }
    });
  }
}
function createDevApp() {
  return new DevAppBuilder();
}

export { DevAppBuilder, createDevApp, isReactRouterBeta };
//# sourceMappingURL=render.esm.js.map
