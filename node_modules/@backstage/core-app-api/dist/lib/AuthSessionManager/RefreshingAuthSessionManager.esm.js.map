{"version":3,"file":"RefreshingAuthSessionManager.esm.js","sources":["../../../src/lib/AuthSessionManager/RefreshingAuthSessionManager.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  SessionManager,\n  SessionScopesFunc,\n  SessionShouldRefreshFunc,\n  GetSessionOptions,\n} from './types';\nimport { AuthConnector } from '../AuthConnector';\nimport { SessionScopeHelper, hasScopes } from './common';\nimport { SessionStateTracker } from './SessionStateTracker';\n\ntype Options<T> = {\n  /** The connector used for acting on the auth session */\n  connector: AuthConnector<T>;\n  /** Used to get the scope of the session */\n  sessionScopes: SessionScopesFunc<T>;\n  /** Used to check if the session needs to be refreshed */\n  sessionShouldRefresh: SessionShouldRefreshFunc<T>;\n  /** The default scopes that should always be present in a session, defaults to none. */\n  defaultScopes?: Set<string>;\n};\n\n/**\n * RefreshingAuthSessionManager manages an underlying session that has\n * and expiration time and needs to be refreshed periodically.\n */\nexport class RefreshingAuthSessionManager<T> implements SessionManager<T> {\n  private readonly connector: AuthConnector<T>;\n  private readonly helper: SessionScopeHelper<T>;\n  private readonly sessionScopesFunc: SessionScopesFunc<T>;\n  private readonly sessionShouldRefreshFunc: SessionShouldRefreshFunc<T>;\n  private readonly stateTracker = new SessionStateTracker();\n\n  private refreshPromise?: Promise<T>;\n  private currentSession: T | undefined;\n\n  constructor(options: Options<T>) {\n    const {\n      connector,\n      defaultScopes = new Set(),\n      sessionScopes,\n      sessionShouldRefresh,\n    } = options;\n\n    this.connector = connector;\n    this.sessionScopesFunc = sessionScopes;\n    this.sessionShouldRefreshFunc = sessionShouldRefresh;\n    this.helper = new SessionScopeHelper({ sessionScopes, defaultScopes });\n  }\n\n  async getSession(options: GetSessionOptions): Promise<T | undefined> {\n    if (\n      this.helper.sessionExistsAndHasScope(this.currentSession, options.scopes)\n    ) {\n      const shouldRefresh = this.sessionShouldRefreshFunc(this.currentSession!);\n      if (!shouldRefresh) {\n        return this.currentSession!;\n      }\n\n      try {\n        const refreshedSession = await this.collapsedSessionRefresh(\n          options.scopes,\n        );\n        const currentScopes = this.sessionScopesFunc(this.currentSession!);\n        const refreshedScopes = this.sessionScopesFunc(refreshedSession);\n        if (hasScopes(refreshedScopes, currentScopes)) {\n          this.currentSession = refreshedSession;\n        }\n        return refreshedSession;\n      } catch (error) {\n        if (options.optional) {\n          return undefined;\n        }\n        throw error;\n      }\n    }\n\n    // The user may still have a valid refresh token in their cookies. Attempt to\n    // initiate a fresh session through the backend using that refresh token.\n    //\n    // We skip this check if an instant login popup is requested, as we need to\n    // stay in a synchronous call stack from the user interaction. The downside\n    // is that the user will sometimes be requested to log in even if they\n    // already had an existing session.\n    if (!this.currentSession && !options.instantPopup) {\n      try {\n        const newSession = await this.collapsedSessionRefresh(options.scopes);\n        this.currentSession = newSession;\n        // The session might not have the scopes requested so go back and check again\n        return this.getSession(options);\n      } catch {\n        // If the refresh attempt fails we assume we don't have a session, so continue to create one.\n      }\n    }\n\n    // If we continue here we will show a popup, so exit if this is an optional session request.\n    if (options.optional) {\n      return undefined;\n    }\n\n    // We can call authRequester multiple times, the returned session will contain all requested scopes.\n    this.currentSession = await this.connector.createSession({\n      ...options,\n      scopes: this.helper.getExtendedScope(this.currentSession, options.scopes),\n    });\n    this.stateTracker.setIsSignedIn(true);\n    return this.currentSession;\n  }\n\n  async removeSession() {\n    this.currentSession = undefined;\n    await this.connector.removeSession();\n    this.stateTracker.setIsSignedIn(false);\n  }\n\n  sessionState$() {\n    return this.stateTracker.sessionState$();\n  }\n\n  private async collapsedSessionRefresh(scopes?: Set<string>): Promise<T> {\n    if (this.refreshPromise) {\n      return this.refreshPromise;\n    }\n\n    this.refreshPromise = this.connector.refreshSession(\n      this.helper.getExtendedScope(this.currentSession, scopes),\n    );\n\n    try {\n      const session = await this.refreshPromise;\n      this.stateTracker.setIsSignedIn(true);\n      return session;\n    } finally {\n      delete this.refreshPromise;\n    }\n  }\n}\n"],"names":[],"mappings":"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"}