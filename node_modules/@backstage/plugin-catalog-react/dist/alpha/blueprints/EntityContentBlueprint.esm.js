import { createExtensionBlueprint, coreExtensionData, ExtensionBoundary } from '@backstage/frontend-plugin-api';
import { catalogExtensionData } from '../extensions.esm.js';

const EntityContentBlueprint = createExtensionBlueprint({
  kind: "entity-content",
  attachTo: { id: "page:catalog/entity", input: "contents" },
  output: [
    coreExtensionData.reactElement,
    coreExtensionData.routePath,
    catalogExtensionData.entityContentTitle,
    coreExtensionData.routeRef.optional(),
    catalogExtensionData.entityFilterFunction.optional(),
    catalogExtensionData.entityFilterExpression.optional()
  ],
  dataRefs: {
    title: catalogExtensionData.entityContentTitle,
    filterFunction: catalogExtensionData.entityFilterFunction,
    filterExpression: catalogExtensionData.entityFilterExpression
  },
  config: {
    schema: {
      path: (z) => z.string().optional(),
      title: (z) => z.string().optional(),
      filter: (z) => z.string().optional()
    }
  },
  *factory({
    loader,
    defaultPath,
    defaultTitle,
    filter,
    routeRef
  }, { node, config }) {
    const path = config.path ?? defaultPath;
    const title = config.title ?? defaultTitle;
    yield coreExtensionData.reactElement(ExtensionBoundary.lazy(node, loader));
    yield coreExtensionData.routePath(path);
    yield catalogExtensionData.entityContentTitle(title);
    if (routeRef) {
      yield coreExtensionData.routeRef(routeRef);
    }
    if (config.filter) {
      yield catalogExtensionData.entityFilterExpression(config.filter);
    } else if (typeof filter === "string") {
      yield catalogExtensionData.entityFilterExpression(filter);
    } else if (typeof filter === "function") {
      yield catalogExtensionData.entityFilterFunction(filter);
    }
  }
});

export { EntityContentBlueprint };
//# sourceMappingURL=EntityContentBlueprint.esm.js.map
