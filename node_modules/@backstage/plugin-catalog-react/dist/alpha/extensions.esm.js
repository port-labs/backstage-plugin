import { createExtensionDataRef, createSchemaFromZod, createExtension, coreExtensionData, ExtensionBoundary } from '@backstage/frontend-plugin-api';
import React, { lazy } from 'react';
import '@backstage/catalog-model';
import '@backstage/plugin-permission-react';
import '../hooks/useEntity.esm.js';
export { catalogReactTranslationRef } from '../translation.esm.js';

const catalogExtensionData = {
  entityContentTitle: createExtensionDataRef().with({
    id: "catalog.entity-content-title"
  }),
  entityFilterFunction: createExtensionDataRef().with({ id: "catalog.entity-filter-function" }),
  entityFilterExpression: createExtensionDataRef().with({
    id: "catalog.entity-filter-expression"
  })
};
function createEntityCardExtension(options) {
  const configSchema = "configSchema" in options ? options.configSchema : createSchemaFromZod(
    (z) => z.object({
      filter: z.string().optional()
    })
  );
  return createExtension({
    kind: "entity-card",
    namespace: options.namespace,
    name: options.name,
    attachTo: options.attachTo ?? {
      id: "entity-content:catalog/overview",
      input: "cards"
    },
    disabled: options.disabled,
    output: {
      element: coreExtensionData.reactElement,
      filterFunction: catalogExtensionData.entityFilterFunction.optional(),
      filterExpression: catalogExtensionData.entityFilterExpression.optional()
    },
    inputs: options.inputs,
    configSchema,
    factory({ config, inputs, node }) {
      const ExtensionComponent = lazy(
        () => options.loader({ inputs, config }).then((element) => ({ default: () => element }))
      );
      return {
        element: /* @__PURE__ */ React.createElement(ExtensionBoundary, { node }, /* @__PURE__ */ React.createElement(ExtensionComponent, null)),
        ...mergeFilters({ config, options })
      };
    }
  });
}
function createEntityContentExtension(options) {
  return createExtension({
    kind: "entity-content",
    namespace: options.namespace,
    name: options.name,
    attachTo: options.attachTo ?? {
      id: "page:catalog/entity",
      input: "contents"
    },
    disabled: options.disabled,
    output: {
      element: coreExtensionData.reactElement,
      path: coreExtensionData.routePath,
      routeRef: coreExtensionData.routeRef.optional(),
      title: catalogExtensionData.entityContentTitle,
      filterFunction: catalogExtensionData.entityFilterFunction.optional(),
      filterExpression: catalogExtensionData.entityFilterExpression.optional()
    },
    inputs: options.inputs,
    configSchema: createSchemaFromZod(
      (z) => z.object({
        path: z.string().default(options.defaultPath),
        title: z.string().default(options.defaultTitle),
        filter: z.string().optional()
      })
    ),
    factory({ config, inputs, node }) {
      const ExtensionComponent = lazy(
        () => options.loader({ inputs }).then((element) => ({ default: () => element }))
      );
      return {
        path: config.path,
        title: config.title,
        routeRef: options.routeRef,
        element: /* @__PURE__ */ React.createElement(ExtensionBoundary, { node }, /* @__PURE__ */ React.createElement(ExtensionComponent, null)),
        ...mergeFilters({ config, options })
      };
    }
  });
}
function mergeFilters(inputs) {
  const { options, config } = inputs;
  if (config.filter) {
    return { filterExpression: config.filter };
  } else if (typeof options.filter === "string") {
    return { filterExpression: options.filter };
  } else if (typeof options.filter === "function") {
    return { filterFunction: options.filter };
  }
  return {};
}

export { catalogExtensionData, createEntityCardExtension, createEntityContentExtension };
//# sourceMappingURL=extensions.esm.js.map
