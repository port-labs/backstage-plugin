{"version":3,"file":"kindFilterUtils.esm.js","sources":["../../../src/components/EntityKindPicker/kindFilterUtils.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useApi } from '@backstage/core-plugin-api';\nimport useAsync from 'react-use/esm/useAsync';\nimport { catalogApiRef } from '../../api';\n\n/**\n * Fetch and return all availible kinds.\n */\nexport function useAllKinds(): {\n  loading: boolean;\n  error?: Error;\n  allKinds: string[];\n} {\n  const catalogApi = useApi(catalogApiRef);\n\n  const {\n    error,\n    loading,\n    value: allKinds,\n  } = useAsync(async () => {\n    const items = await catalogApi\n      .getEntityFacets({ facets: ['kind'] })\n      .then(response => response.facets.kind?.map(f => f.value).sort() || []);\n    return items;\n  }, [catalogApi]);\n\n  return { loading, error, allKinds: allKinds ?? [] };\n}\n\n/**\n * Filter and capitalize accessible kinds.\n */\nexport function filterKinds(\n  allKinds: string[],\n  allowedKinds?: string[],\n  forcedKinds?: string,\n): Record<string, string> {\n  // Before allKinds is loaded, or when a kind is entered manually in the URL, selectedKind may not\n  // be present in allKinds. It should still be shown in the dropdown, but may not have the nice\n  // enforced casing from the catalog-backend. This makes a key/value record for the Select options,\n  // including selectedKind if it's unknown - but allows the selectedKind to get clobbered by the\n  // more proper catalog kind if it exists.\n  let availableKinds = allKinds;\n  if (allowedKinds) {\n    availableKinds = availableKinds.filter(k =>\n      allowedKinds.some(\n        a => a.toLocaleLowerCase('en-US') === k.toLocaleLowerCase('en-US'),\n      ),\n    );\n  }\n  if (\n    forcedKinds &&\n    !allKinds.some(\n      a =>\n        a.toLocaleLowerCase('en-US') === forcedKinds.toLocaleLowerCase('en-US'),\n    )\n  ) {\n    availableKinds = availableKinds.concat([forcedKinds]);\n  }\n\n  const kindsMap = availableKinds.sort().reduce((acc, kind) => {\n    acc[kind.toLocaleLowerCase('en-US')] = kind;\n    return acc;\n  }, {} as Record<string, string>);\n\n  return kindsMap;\n}\n"],"names":[],"mappings":";;;;AAuBO,SAAS,WAId,GAAA;AACA,EAAM,MAAA,UAAA,GAAa,OAAO,aAAa,CAAA,CAAA;AAEvC,EAAM,MAAA;AAAA,IACJ,KAAA;AAAA,IACA,OAAA;AAAA,IACA,KAAO,EAAA,QAAA;AAAA,GACT,GAAI,SAAS,YAAY;AACvB,IAAM,MAAA,KAAA,GAAQ,MAAM,UAAA,CACjB,eAAgB,CAAA,EAAE,QAAQ,CAAC,MAAM,CAAE,EAAC,CACpC,CAAA,IAAA,CAAK,cAAY,QAAS,CAAA,MAAA,CAAO,IAAM,EAAA,GAAA,CAAI,CAAK,CAAA,KAAA,CAAA,CAAE,KAAK,CAAE,CAAA,IAAA,EAAU,IAAA,EAAE,CAAA,CAAA;AACxE,IAAO,OAAA,KAAA,CAAA;AAAA,GACT,EAAG,CAAC,UAAU,CAAC,CAAA,CAAA;AAEf,EAAA,OAAO,EAAE,OAAS,EAAA,KAAA,EAAO,QAAU,EAAA,QAAA,IAAY,EAAG,EAAA,CAAA;AACpD,CAAA;AAKgB,SAAA,WAAA,CACd,QACA,EAAA,YAAA,EACA,WACwB,EAAA;AAMxB,EAAA,IAAI,cAAiB,GAAA,QAAA,CAAA;AACrB,EAAA,IAAI,YAAc,EAAA;AAChB,IAAA,cAAA,GAAiB,cAAe,CAAA,MAAA;AAAA,MAAO,OACrC,YAAa,CAAA,IAAA;AAAA,QACX,OAAK,CAAE,CAAA,iBAAA,CAAkB,OAAO,CAAM,KAAA,CAAA,CAAE,kBAAkB,OAAO,CAAA;AAAA,OACnE;AAAA,KACF,CAAA;AAAA,GACF;AACA,EACE,IAAA,WAAA,IACA,CAAC,QAAS,CAAA,IAAA;AAAA,IACR,OACE,CAAE,CAAA,iBAAA,CAAkB,OAAO,CAAM,KAAA,WAAA,CAAY,kBAAkB,OAAO,CAAA;AAAA,GAE1E,EAAA;AACA,IAAA,cAAA,GAAiB,cAAe,CAAA,MAAA,CAAO,CAAC,WAAW,CAAC,CAAA,CAAA;AAAA,GACtD;AAEA,EAAA,MAAM,WAAW,cAAe,CAAA,IAAA,GAAO,MAAO,CAAA,CAAC,KAAK,IAAS,KAAA;AAC3D,IAAA,GAAA,CAAI,IAAK,CAAA,iBAAA,CAAkB,OAAO,CAAC,CAAI,GAAA,IAAA,CAAA;AACvC,IAAO,OAAA,GAAA,CAAA;AAAA,GACT,EAAG,EAA4B,CAAA,CAAA;AAE/B,EAAO,OAAA,QAAA,CAAA;AACT;;;;"}