{"version":3,"file":"useEntityTypeFilter.esm.js","sources":["../../src/hooks/useEntityTypeFilter.tsx"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport useAsync from 'react-use/esm/useAsync';\nimport isEqual from 'lodash/isEqual';\nimport sortBy from 'lodash/sortBy';\nimport { useApi } from '@backstage/core-plugin-api';\nimport { catalogApiRef } from '../api';\nimport { useEntityList } from './useEntityListProvider';\nimport { EntityTypeFilter } from '../filters';\n\n/**\n * A hook built on top of `useEntityList` for enabling selection of valid `spec.type` values\n * based on the selected EntityKindFilter.\n * @public\n */\nexport function useEntityTypeFilter(): {\n  loading: boolean;\n  error?: Error;\n  availableTypes: string[];\n  selectedTypes: string[];\n  setSelectedTypes: (types: string[]) => void;\n} {\n  const catalogApi = useApi(catalogApiRef);\n  const {\n    filters: { kind: kindFilter, type: typeFilter },\n    queryParameters: { type: typeParameter },\n    updateFilters,\n  } = useEntityList();\n\n  const flattenedQueryTypes = useMemo(\n    () => [typeParameter].flat().filter(Boolean) as string[],\n    [typeParameter],\n  );\n\n  const [selectedTypes, setSelectedTypes] = useState(\n    flattenedQueryTypes.length\n      ? flattenedQueryTypes\n      : typeFilter?.getTypes() ?? [],\n  );\n\n  // Set selected types on query parameter updates; this happens at initial page load and from\n  // external updates to the page location.\n  useEffect(() => {\n    if (flattenedQueryTypes.length) {\n      setSelectedTypes(flattenedQueryTypes);\n    }\n  }, [flattenedQueryTypes]);\n\n  const [availableTypes, setAvailableTypes] = useState<string[]>([]);\n  const kind = useMemo(() => kindFilter?.value, [kindFilter]);\n\n  // Load all valid spec.type values straight from the catalogApi, paying attention to only the\n  // kind filter for a complete list.\n  const {\n    error,\n    loading,\n    value: facets,\n  } = useAsync(async () => {\n    if (kind) {\n      const items = await catalogApi\n        .getEntityFacets({\n          filter: { kind },\n          facets: ['spec.type'],\n        })\n        .then(response => response.facets['spec.type'] || []);\n      return items;\n    }\n    return [];\n  }, [kind, catalogApi]);\n\n  const facetsRef = useRef(facets);\n  useEffect(() => {\n    const oldFacets = facetsRef.current;\n    facetsRef.current = facets;\n    // Delay processing hook until kind and facets load updates have settled to generate list of types;\n    // This prevents resetting the type filter due to saved type value from query params not matching the\n    // empty set of type values while values are still being loaded; also only run this hook on changes\n    // to facets\n    if (loading || !kind || oldFacets === facets || !facets) {\n      return;\n    }\n\n    // Sort by facet count descending, so the most common types appear on top\n    const newTypes = [\n      ...new Set(\n        sortBy(facets, f => -f.count).map(f =>\n          f.value.toLocaleLowerCase('en-US'),\n        ),\n      ),\n    ];\n    setAvailableTypes(newTypes);\n\n    // Update type filter to only valid values when the list of available types has changed\n    const stillValidTypes = selectedTypes.filter(value =>\n      newTypes.includes(value),\n    );\n    if (!isEqual(selectedTypes, stillValidTypes)) {\n      setSelectedTypes(stillValidTypes);\n    }\n  }, [loading, kind, selectedTypes, setSelectedTypes, facets]);\n\n  useEffect(() => {\n    updateFilters({\n      type: selectedTypes.length\n        ? new EntityTypeFilter(selectedTypes)\n        : undefined,\n    });\n  }, [selectedTypes, updateFilters]);\n\n  return {\n    loading,\n    error,\n    availableTypes,\n    selectedTypes,\n    setSelectedTypes,\n  };\n}\n"],"names":[],"mappings":"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"}